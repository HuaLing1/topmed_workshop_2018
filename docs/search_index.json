[
["index.html", "TOPMed Analysis Workshop 1 Introduction", " TOPMed Analysis Workshop 2017-07-27 1 Introduction This site contains course materials for the TOPMed Analysis Workshop, August 7-9 2017. "],
["gds-format.html", "2 GDS format", " 2 GDS format GDS is Genomic Data Structure, a storage format that can efficiently store genomic data and provide fast random access to subsets of the data. For more information on GDS for sequence data, read the SeqArray package vignette. To use the R packages developed at the DCC for sequence data, we first need to convert a VCF file to GDS. (If the file is BCF, use https://samtools.github.io/bcftools/bcftools.html to convert to VCF.) library(SeqArray) data.path &lt;- &quot;https://github.com/smgogarten/analysis_pipeline/raw/devel/testdata&quot; vcffile &lt;- &quot;1KG_phase3_subset_chr1.vcf.gz&quot; if (!file.exists(vcffile)) download.file(file.path(data.path, vcffile), vcffile) gdsfile &lt;- &quot;1KG_phase3_subset_chr1.gds&quot; seqVCF2GDS(vcffile, gdsfile, fmt.import=&quot;GT&quot;, storage.option=&quot;LZMA_RA&quot;, verbose=FALSE) We can interact with the GDS file using the SeqArray package. gds &lt;- seqOpen(gdsfile) gds ## Object of class &quot;SeqVarGDSClass&quot; ## File: /projects/users/stephanie/Code/TOPMed/topmed_workshop_2017/1KG_phase3_subset_chr1.gds (70.3K) ## + [ ] * ## |--+ description [ ] * ## |--+ sample.id { Str8 1126 LZMA_ra(9.66%), 877B } * ## |--+ variant.id { Int32 1120 LZMA_ra(17.5%), 793B } * ## |--+ position { Int32 1120 LZMA_ra(78.5%), 3.4K } * ## |--+ chromosome { Str8 1120 LZMA_ra(4.55%), 109B } * ## |--+ allele { Str8 1120 LZMA_ra(26.0%), 1.2K } * ## |--+ genotype [ ] * ## | |--+ data { Bit2 2x1126x1121 LZMA_ra(8.34%), 51.4K } * ## | |--+ extra.index { Int32 3x0 LZMA_ra, 18B } * ## | \\--+ extra { Int16 0 LZMA_ra, 18B } ## |--+ phase [ ] ## | |--+ data { Bit1 1126x1120 LZMA_ra(0.11%), 177B } * ## | |--+ extra.index { Int32 3x0 LZMA_ra, 18B } * ## | \\--+ extra { Bit1 0 LZMA_ra, 18B } ## |--+ annotation [ ] ## | |--+ id { Str8 1120 LZMA_ra(40.4%), 3.6K } * ## | |--+ qual { Float32 1120 LZMA_ra(2.46%), 117B } * ## | |--+ filter { Int32,factor 1120 LZMA_ra(2.46%), 117B } * ## | |--+ info [ ] ## | \\--+ format [ ] ## \\--+ sample.annotation [ ] sample.id &lt;- seqGetData(gds, &quot;sample.id&quot;) length(sample.id) ## [1] 1126 head(sample.id) ## [1] &quot;HG00096&quot; &quot;HG00097&quot; &quot;HG00099&quot; &quot;HG00100&quot; &quot;HG00101&quot; &quot;HG00102&quot; variant.id &lt;- seqGetData(gds, &quot;variant.id&quot;) length(variant.id) ## [1] 1120 head(variant.id) ## [1] 1 2 3 4 5 6 # define a filter to read a subset of data seqSetFilter(gds, variant.id=1:10, sample.id=sample.id[1:5]) ## # of selected samples: 5 ## # of selected variants: 10 geno &lt;- seqGetData(gds, &quot;genotype&quot;) dim(geno) ## [1] 2 5 10 geno[,,1:2] ## , , 1 ## ## sample ## allele [,1] [,2] [,3] [,4] [,5] ## [1,] 0 0 0 0 0 ## [2,] 0 0 0 0 0 ## ## , , 2 ## ## sample ## allele [,1] [,2] [,3] [,4] [,5] ## [1,] 0 0 0 0 0 ## [2,] 0 0 0 0 0 The SeqVarTools package has some additional functions for interacting with SeqArray-format GDS files. library(SeqVarTools) getGenotype(gds) ## variant ## sample 1 2 3 4 5 6 7 8 9 10 ## HG00096 &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; ## HG00097 &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; ## HG00099 &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; ## HG00100 &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; ## HG00101 &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; refDosage(gds) ## variant ## sample 1 2 3 4 5 6 7 8 9 10 ## HG00096 2 2 2 2 2 2 2 2 2 2 ## HG00097 2 2 2 2 2 2 2 2 2 2 ## HG00099 2 2 2 2 2 2 2 2 2 2 ## HG00100 2 2 2 2 2 2 2 2 2 2 ## HG00101 2 2 2 2 2 2 2 2 2 2 altDosage(gds) ## variant ## sample 1 2 3 4 5 6 7 8 9 10 ## HG00096 0 0 0 0 0 0 0 0 0 0 ## HG00097 0 0 0 0 0 0 0 0 0 0 ## HG00099 0 0 0 0 0 0 0 0 0 0 ## HG00100 0 0 0 0 0 0 0 0 0 0 ## HG00101 0 0 0 0 0 0 0 0 0 0 refChar(gds) ## [1] &quot;C&quot; &quot;C&quot; &quot;C&quot; &quot;C&quot; &quot;T&quot; &quot;G&quot; &quot;G&quot; &quot;A&quot; &quot;A&quot; &quot;C&quot; altChar(gds) ## [1] &quot;G&quot; &quot;T&quot; &quot;T&quot; &quot;T&quot; &quot;C&quot; &quot;A&quot; &quot;A&quot; &quot;T&quot; &quot;C&quot; &quot;T&quot; seqClose(gds) "],
["computing-a-grm.html", "3 Computing a GRM", " 3 Computing a GRM We can use the SNPRelate package to compute a Genetic Relationship matrix (GRM). library(SeqArray) data.path &lt;- &quot;https://github.com/smgogarten/analysis_pipeline/raw/devel/testdata&quot; gdsfile &lt;- &quot;1KG_phase3_subset_chr1.gds&quot; if (!file.exists(gdsfile)) download.file(file.path(data.path, gdsfile), gdsfile) gds &lt;- seqOpen(gdsfile) library(SNPRelate) grm &lt;- snpgdsGRM(gds, method=&quot;GCTA&quot;) ## Genetic Relationship Matrix (GRM, GCTA): ## Calculating allele counts/frequencies ... ## [..................................................] 0%, ETC: --- [==================================================] 100%, completed ## Excluding 13 SNVs (monomorphic: TRUE, MAF: NaN, missing rate: NaN) ## Working space: 1,126 samples, 1,107 SNVs ## using 1 (CPU) core ## CPU capabilities: Double-Precision SSE2 ## Thu Jul 27 17:48:42 2017 (internal increment: 680) ## [..................................................] 0%, ETC: --- [==================================================] 100%, completed in 0s ## Thu Jul 27 17:48:42 2017 Done. names(grm) ## [1] &quot;sample.id&quot; &quot;snp.id&quot; &quot;grm&quot; dim(grm$grm) ## [1] 1126 1126 seqClose(gds) "],
["pc-relate.html", "4 PC-Relate", " 4 PC-Relate To disentangle ancestry from recent familial relatedness, we use the PC-Relate method. Step 1 is to get initial estimates of kinship using KING, which is robust to population structure but not admixture. The KING algorithm is available in SNPRelate. Typically we select a subset of variants for this calculation with LD pruning. # use a GDS file with all chromosomes library(SeqArray) data.path &lt;- &quot;https://github.com/smgogarten/analysis_pipeline/raw/devel/testdata&quot; gdsfile &lt;- &quot;1KG_phase3_subset.gds&quot; if (!file.exists(gdsfile)) download.file(file.path(data.path, gdsfile), gdsfile) gds &lt;- seqOpen(gdsfile) # use a subset of 100 samples to make things run faster workshop.path &lt;- &quot;https://github.com/UW-GAC/topmed_workshop_2017/raw/master&quot; sampfile &lt;- &quot;samples_subset100.RData&quot; if (!file.exists(sampfile)) download.file(file.path(workshop.path, sampfile), sampfile) sample.id &lt;- TopmedPipeline::getobj(sampfile) # LD pruning to get variant set library(SNPRelate) snpset &lt;- snpgdsLDpruning(gds, sample.id=sample.id, method=&quot;corr&quot;, slide.max.bp=10e6, ld.threshold=sqrt(0.1)) ## SNV pruning based on LD: ## Excluding 1,120 SNVs on non-autosomes ## Calculating allele counts/frequencies ... ## [..................................................] 0%, ETC: --- [==================================================] 100%, completed ## Excluding 13,673 SNVs (monomorphic: TRUE, MAF: NaN, missing rate: NaN) ## Working space: 100 samples, 10,967 SNVs ## using 1 (CPU) core ## sliding window: 10,000,000 basepairs, Inf SNPs ## |LD| threshold: 0.316228 ## method: correlation ## Chromosome 1: 31.16%, 349/1,120 ## Chromosome 2: 31.43%, 352/1,120 ## Chromosome 3: 30.62%, 343/1,120 ## Chromosome 4: 30.36%, 340/1,120 ## Chromosome 5: 29.64%, 332/1,120 ## Chromosome 6: 31.07%, 348/1,120 ## Chromosome 7: 28.48%, 319/1,120 ## Chromosome 8: 26.25%, 294/1,120 ## Chromosome 9: 27.95%, 313/1,120 ## Chromosome 10: 28.84%, 323/1,120 ## Chromosome 11: 26.79%, 300/1,120 ## Chromosome 12: 28.39%, 318/1,120 ## Chromosome 13: 25.98%, 291/1,120 ## Chromosome 14: 24.02%, 269/1,120 ## Chromosome 15: 22.68%, 254/1,120 ## Chromosome 16: 22.32%, 250/1,120 ## Chromosome 17: 22.05%, 247/1,120 ## Chromosome 18: 23.48%, 263/1,120 ## Chromosome 19: 21.88%, 245/1,120 ## Chromosome 20: 20.00%, 224/1,120 ## Chromosome 21: 16.70%, 187/1,120 ## Chromosome 22: 16.70%, 187/1,120 ## 6,348 markers are selected in total. sapply(snpset, length) ## chr1 chr2 chr3 chr4 chr5 chr6 chr7 chr8 chr9 chr10 chr11 chr12 ## 349 352 343 340 332 348 319 294 313 323 300 318 ## chr13 chr14 chr15 chr16 chr17 chr18 chr19 chr20 chr21 chr22 ## 291 269 254 250 247 263 245 224 187 187 pruned &lt;- unlist(snpset, use.names=FALSE) # KING king &lt;- snpgdsIBDKING(gds, sample.id=sample.id, snp.id=pruned) ## IBD analysis (KING method of moment) on genotypes: ## Calculating allele counts/frequencies ... ## [..................................................] 0%, ETC: --- [==================================================] 100%, completed ## Working space: 100 samples, 6,348 SNVs ## using 1 (CPU) core ## No family is specified, and all individuals are treated as singletons. ## Relationship inference in the presence of population stratification. ## CPU capabilities: Double-Precision SSE2 ## Thu Jul 27 17:48:45 2017 (internal increment: 65536) ## [..................................................] 0%, ETC: --- [==================================================] 100%, completed in 1s ## Thu Jul 27 17:48:46 2017 Done. names(king) ## [1] &quot;sample.id&quot; &quot;snp.id&quot; &quot;afreq&quot; &quot;IBS0&quot; &quot;kinship&quot; dim(king$kinship) ## [1] 100 100 kingMat &lt;- king$kinship colnames(kingMat) &lt;- rownames(kingMat) &lt;- king$sample.id We extract pairwise kinship estimates and IBS0 to plot. kinship &lt;- snpgdsIBDSelection(king) head(kinship) ## ID1 ID2 IBS0 kinship ## 1 HG00110 HG00116 0.02567738 -0.01326900 ## 2 HG00110 HG00120 0.02788280 -0.03015682 ## 3 HG00110 HG00128 0.02551985 -0.02444307 ## 4 HG00110 HG00136 0.02914304 -0.04131484 ## 5 HG00110 HG00137 0.02725268 -0.03377563 ## 6 HG00110 HG00141 0.02819786 -0.04071170 library(ggplot2) ggplot(kinship, aes(IBS0, kinship)) + geom_hline(yintercept=2^(-seq(3,9,2)/2), linetype=&quot;dashed&quot;, color=&quot;grey&quot;) + geom_point(alpha=0.5) + ylab(&quot;kinship estimate&quot;) + theme_bw() The next step is PC-AiR, in which we select a set of unrelated samples that is maximally informative about all ancestries in the sample. We use this unrelated set for Principal Component Analysis (PCA), then project the relatives onto the PCs. First, we partition the samples into a related and unrelated set. We use a kinship threshold of degree 3 (unrelated is less than first cousins). We load the GENESIS package. In the first iteration, we use the KING estimates for both kinship (kinMat) and ancestry divergence (divMat). KING kinship estimates are negative for samples with different ancestry. library(GENESIS) sampset &lt;- pcairPartition(kinMat=kingMat, kin.thresh=2^(-9/2), divMat=kingMat, div.thresh=-2^(-9/2)) names(sampset) ## [1] &quot;rels&quot; &quot;unrels&quot; sapply(sampset, length) ## rels unrels ## 15 85 Typically we would repeat the LD pruning step on the set of unrelated samples we just identified, but for this example we will re-use the pruned set of variants from step 1. Using the SNPRelate package, we run PCA on the unrelated set and project values for the related set. # run PCA on unrelated set pca.unrel &lt;- snpgdsPCA(gds, sample.id=sampset$unrels, snp.id=pruned) ## Principal Component Analysis (PCA) on genotypes: ## Calculating allele counts/frequencies ... ## [..................................................] 0%, ETC: --- [==================================================] 100%, completed ## Excluding 243 SNVs (monomorphic: TRUE, MAF: NaN, missing rate: NaN) ## Working space: 85 samples, 6,105 SNVs ## using 1 (CPU) core ## CPU capabilities: Double-Precision SSE2 ## Thu Jul 27 17:48:48 2017 (internal increment: 9056) ## [..................................................] 0%, ETC: --- [==================================================] 100%, completed in 0s ## Thu Jul 27 17:48:48 2017 Begin (eigenvalues and eigenvectors) ## Thu Jul 27 17:48:48 2017 Done. # project values for relatives snp.load &lt;- snpgdsPCASNPLoading(pca.unrel, gdsobj=gds) ## SNP loading: ## Working space: 85 samples, 6105 SNPs ## using 1 (CPU) core ## using the top 32 eigenvectors ## Thu Jul 27 17:48:48 2017 (internal increment: 65536) ## [..................................................] 0%, ETC: --- [==================================================] 100%, completed in 1s ## Thu Jul 27 17:48:49 2017 Done. samp.load &lt;- snpgdsPCASampLoading(snp.load, gdsobj=gds, sample.id=sampset$rels) ## Sample loading: ## Working space: 15 samples, 6105 SNPs ## using 1 (CPU) core ## using the top 32 eigenvectors ## Thu Jul 27 17:48:49 2017 (internal increment: 65536) ## [..................................................] 0%, ETC: --- [==================================================] 100%, completed in 0s ## Thu Jul 27 17:48:49 2017 Done. # combine unrelated and related PCs and order as in GDS file pcs &lt;- rbind(pca.unrel$eigenvect, samp.load$eigenvect) rownames(pcs) &lt;- c(pca.unrel$sample.id, samp.load$sample.id) samp.ord &lt;- match(sample.id, rownames(pcs)) pcs &lt;- pcs[samp.ord,] We need to determine which PCs are ancestry informative. To do this we need population information for the 1000 Genomes samples. This information is stored in an AnnotatedDataFrame, which is a data.frame with optional metadata describing the colunms. The class is defined in the Biobase package. We load the stored object using the getobj function from the TopmedPipeline package. library(Biobase) sampfile &lt;- &quot;1KG_phase3_subset_annot.RData&quot; if (!file.exists(sampfile)) download.file(file.path(data.path, sampfile), sampfile) annot &lt;- TopmedPipeline::getobj(sampfile) annot ## An object of class &#39;AnnotatedDataFrame&#39; ## rowNames: 1 2 ... 2504 (1126 total) ## varLabels: sample.id family.id ... status (7 total) ## varMetadata: labelDescription head(pData(annot)) ## sample.id family.id Population Population.Description sex ## 1 HG00096 HG00096 GBR British in England and Scotland M ## 2 HG00097 HG00097 GBR British in England and Scotland F ## 3 HG00099 HG00099 GBR British in England and Scotland F ## 4 HG00100 HG00100 GBR British in England and Scotland F ## 5 HG00101 HG00101 GBR British in England and Scotland M ## 6 HG00102 HG00102 GBR British in England and Scotland F ## outcome status ## 1 8.580417 0 ## 2 10.769515 1 ## 3 10.428110 0 ## 4 11.034979 1 ## 5 9.706791 0 ## 6 10.225198 0 varMetadata(annot) ## labelDescription ## sample.id sample identifier ## family.id family identifier ## Population population abbreviation ## Population.Description population description ## sex sex ## outcome simulated random normal phenotype ## status simulated case/control status We make a parallel coordinates plot, color-coding by 1000 Genomes population. We load the dplyr package for data.frame manipulation. pc.df &lt;- as.data.frame(pcs) names(pc.df) &lt;- 1:ncol(pcs) pc.df$sample.id &lt;- row.names(pcs) library(dplyr) annot &lt;- pData(annot) %&gt;% select(sample.id, Population) pc.df &lt;- left_join(pc.df, annot, by=&quot;sample.id&quot;) library(GGally) library(RColorBrewer) pop.cols &lt;- setNames(brewer.pal(12, &quot;Paired&quot;), c(&quot;ACB&quot;, &quot;ASW&quot;, &quot;CEU&quot;, &quot;GBR&quot;, &quot;CHB&quot;, &quot;JPT&quot;, &quot;CLM&quot;, &quot;MXL&quot;, &quot;LWK&quot;, &quot;YRI&quot;, &quot;GIH&quot;, &quot;PUR&quot;)) ggparcoord(pc.df, columns=1:12, groupColumn=&quot;Population&quot;, scale=&quot;uniminmax&quot;) + scale_color_manual(values=pop.cols) + xlab(&quot;PC&quot;) + ylab(&quot;&quot;) The first 2 PCs separate populations, so we use them to compute kinship estimates adjusting for ancestry. The PC-Relate function expects a SeqVarData object, which allows linking sample and variant annotation with a GDS file in a single object. We will cover these in more detail later for association testing, but for now we create a bare object with no annotation. seqResetFilter(gds, verbose=FALSE) library(SeqVarTools) seqData &lt;- SeqVarData(gds) pcrel &lt;- pcrelate(seqData, pcMat=pcs[,1:2], training.set=sampset$unrels, scan.include=sample.id, snp.include=pruned) names(pcrel) ## [1] &quot;sample.id&quot; &quot;kinship&quot; &quot;ibd.probs&quot; &quot;nsnp&quot; &quot;kincorrect&quot; ## [6] &quot;k2correct&quot; &quot;call&quot; &quot;freq.type&quot; &quot;scale&quot; PC-Relate is an iterative method. Now that we have ancestry-adjusted kinship estimates, we can use them to better adjust for ancestry in the PCs. This time we use the pcair function, which combines partitioning the sample set and running PCA in one step. First we need to make a kinship matrix from the PC-Relate results. The KING matrix is still used for ancestry divergence. pcrelMat &lt;- pcrelateMakeGRM(pcrel, scaleKin=1) pca &lt;- pcair(seqData, v=32, kinMat=pcrelMat, kin.thresh=2^(-9/2), divMat=kingMat, div.thresh=-2^(-9/2), scan.include=sample.id, snp.include=pruned) names(pca) ## [1] &quot;vectors&quot; &quot;values&quot; &quot;sum.values&quot; &quot;rels&quot; &quot;unrels&quot; ## [6] &quot;kin.thresh&quot; &quot;div.thresh&quot; &quot;nsamp&quot; &quot;nsnps&quot; &quot;MAF&quot; ## [11] &quot;call&quot; &quot;method&quot; pcs &lt;- pca$vectors pc.df &lt;- as.data.frame(pcs) names(pc.df) &lt;- paste0(&quot;PC&quot;, 1:ncol(pcs)) pc.df$sample.id &lt;- row.names(pcs) pc.df &lt;- left_join(pc.df, annot, by=&quot;sample.id&quot;) ggplot(pc.df, aes(PC1, PC2, color=Population)) + geom_point() + scale_color_manual(values=pop.cols) Now we use the revised PCs to compute new kinship estimates. One can run the iteration multiple times and check for conversion, but usually two rounds are sufficient. pcrel &lt;- pcrelate(seqData, pcMat=pcs[,1:2], training.set=pca$unrels, scan.include=sample.id, snp.include=pruned) We plot the kinship estimates from PC-Relate, and notice that the values for less related pairs are much better behaved. kinship &lt;- pcrelateReadKinship(pcrel) ggplot(kinship, aes(k0, kin)) + geom_hline(yintercept=2^(-seq(3,9,2)/2), linetype=&quot;dashed&quot;, color=&quot;grey&quot;) + geom_point(alpha=0.5) + ylab(&quot;kinship estimate&quot;) + theme_bw() seqClose(gds) "],
["association-tests.html", "5 Association tests 5.1 Null model 5.2 Single-variant tests 5.3 Sliding window tests 5.4 Aggregate tests", " 5 Association tests Since TOPMed has many studies with related participants, we focus on linear mixed models. Logistic mixed models are also possible using GENESIS, see the GMMAT paper. 5.1 Null model The first step in an association test is to fit the null model. We use the AnnotatedDataFrame with phenotypes, and a GRM. If the sample set involves multiple distinct groups with different variances for the phenotype, we recommend allowing the model to use heterogeneous variance among groups. data.path &lt;- &quot;https://github.com/smgogarten/analysis_pipeline/raw/devel/testdata&quot; sampfile &lt;- &quot;1KG_phase3_subset_annot.RData&quot; if (!file.exists(sampfile)) download.file(file.path(data.path, sampfile), sampfile) annot &lt;- TopmedPipeline::getobj(sampfile) grmfile &lt;- &quot;grm.RData&quot; if (!file.exists(grmfile)) download.file(file.path(data.path, grmfile), grmfile) grm &lt;- TopmedPipeline::getobj(grmfile) rownames(grm$grm) &lt;- colnames(grm$grm) &lt;- grm$sample.id library(GENESIS) nullmod &lt;- fitNullMM(annot, outcome=&quot;outcome&quot;, covars=c(&quot;sex&quot;, &quot;Population&quot;), covMatList=grm$grm, group.var=&quot;Population&quot;, verbose=FALSE) We also recommend taking an inverse normal transform of the residuals and refitting the model. This is done separately for each group, and the transformed residuals are rescaled. See the full procedure in the pipeline documenation. 5.2 Single-variant tests Single-variant tests are the same as in GWAS. We use the assocTestMM function in GENESIS. We have to create a SeqVarData object including both the GDS file and the sample annotation containing phenotypes. library(SeqVarTools) gdsfile &lt;- &quot;1KG_phase3_subset_chr1.gds&quot; if (!file.exists(gdsfile)) download.file(file.path(data.path, gdsfile), gdsfile) gds &lt;- seqOpen(gdsfile) seqData &lt;- SeqVarData(gds, sampleData=annot) assoc &lt;- assocTestMM(seqData, nullmod) head(assoc) ## snpID chr n MAF minor.allele Est SE ## 1 1 1 1126 0.0039964476 alt 0.037896432 0.3547545 ## 2 2 1 1126 0.0492895204 alt 0.173271721 0.1038710 ## 3 3 1 1126 0.0004440497 alt 0.034881381 1.0211652 ## 4 4 1 1126 0.0008880995 alt 0.003698581 0.6811618 ## 5 5 1 1126 0.0071047957 alt -0.062695115 0.2685319 ## 6 6 1 1126 0.0022202487 alt 0.574104228 0.4504458 ## Wald.Stat Wald.pval ## 1 1.141145e-02 0.91492830 ## 2 2.782705e+00 0.09528713 ## 3 1.166797e-03 0.97275083 ## 4 2.948287e-05 0.99566766 ## 5 5.450992e-02 0.81539366 ## 6 1.624413e+00 0.20247756 We make a QQ plot to examine the results. library(ggplot2) qqPlot &lt;- function(pval) { pval &lt;- pval[!is.na(pval)] n &lt;- length(pval) x &lt;- 1:n dat &lt;- data.frame(obs=sort(pval), exp=x/n, upper=qbeta(0.025, x, rev(x)), lower=qbeta(0.975, x, rev(x))) ggplot(dat, aes(-log10(exp), -log10(obs))) + geom_line(aes(-log10(exp), -log10(upper)), color=&quot;gray&quot;) + geom_line(aes(-log10(exp), -log10(lower)), color=&quot;gray&quot;) + geom_point() + geom_abline(intercept=0, slope=1, color=&quot;red&quot;) + xlab(expression(paste(-log[10], &quot;(expected P)&quot;))) + ylab(expression(paste(-log[10], &quot;(observed P)&quot;))) + theme_bw() } qqPlot(assoc$Wald.pval) 5.3 Sliding window tests For rare variants, we can do burden tests or SKAT on sliding windows using the GENESIS function assocTestSeqWindow. We restrict the test to variants with alternate allele frequency &lt; 0.1. (For real data, this threshold would be lower.) We use a flat weighting scheme. assoc &lt;- assocTestSeqWindow(seqData, nullmod, test=&quot;Burden&quot;, AF.range=c(0,0.1), weight.beta=c(1,1), window.size=5, window.shift=2) names(assoc) ## [1] &quot;param&quot; &quot;window&quot; &quot;nsample&quot; &quot;results&quot; &quot;variantInfo&quot; head(assoc$results) ## chr window.start window.stop n.site dup burden.skew Score ## 1 1 966001 971000 1 0 11.036036 0.30138968 ## 2 1 968001 973000 1 1 11.036036 0.30138968 ## 3 1 970001 975000 1 1 11.036036 0.30138968 ## 4 1 982001 987000 1 0 3.041979 16.03409196 ## 5 1 984001 989000 1 1 3.041979 16.03409196 ## 6 1 1022001 1027000 1 0 33.466573 0.03348047 ## Var Score.stat Score.pval ## 1 7.9529830 0.011421594 0.91489064 ## 2 7.9529830 0.011421594 0.91489064 ## 3 7.9529830 0.011421594 0.91489064 ## 4 92.5372698 2.778254702 0.09555224 ## 5 92.5372698 2.778254702 0.09555224 ## 6 0.9598379 0.001167845 0.97273860 head(assoc$variantInfo) ## variantID allele chr pos n.obs freq weight ## 1 1 1 1 970546 1126 0.0039964476 1 ## 2 2 1 1 985900 1126 0.0492895204 1 ## 3 3 1 1 1025045 1126 0.0004440497 1 ## 4 4 1 1 1265550 1126 0.0008880995 1 ## 5 5 1 1 1472676 1126 0.0071047957 1 ## 6 6 1 1 1735725 1126 0.0022202487 1 qqPlot(assoc$results$Score.pval) For SKAT, we use the Wu weights. assoc &lt;- assocTestSeqWindow(seqData, nullmod, test=&quot;SKAT&quot;, AF.range=c(0,0.1), weight.beta=c(1,25), window.size=5, window.shift=2) head(assoc$results) ## chr window.start window.stop n.site dup Q_0 pval_0 err_0 ## 1 1 966001 971000 1 0 4.684458e+01 0.91489064 0 ## 2 1 968001 973000 1 1 4.684458e+01 0.91489064 0 ## 3 1 970001 975000 1 1 4.684458e+01 0.91489064 0 ## 4 1 982001 987000 1 0 1.419993e+04 0.09555224 0 ## 5 1 984001 989000 1 1 1.419993e+04 0.09555224 0 ## 6 1 1022001 1027000 1 0 6.858109e-01 0.97273860 0 head(assoc$variantInfo) ## variantID allele chr pos n.obs freq weight ## 1 1 1 1 970546 1126 0.0039964476 22.709172 ## 2 2 1 1 985900 1126 0.0492895204 7.431881 ## 3 3 1 1 1025045 1126 0.0004440497 24.734926 ## 4 4 1 1 1265550 1126 0.0008880995 24.472547 ## 5 5 1 1 1472676 1126 0.0071047957 21.067933 ## 6 6 1 1 1735725 1126 0.0022202487 23.701317 qqPlot(assoc$results$pval_0) 5.4 Aggregate tests 5.4.1 Variant annotation Rare variants are generally aggregated into some meaningful units for association testing to decrease multiple testing burden and increase statistical power. Various genomic and epigenomic annotations can be used to define aggregation units and filter them. A large number of annotations are available through the Whole Genome Sequence Annotator (WGSA) to the TOPMed users. 5.4.2 Defining aggregate units We will be using a gene-based aggregation unit, where each unit is a GENCODE gene and 20 kb flanking region upstream and downstream of it. For real data, one will likely filter variants within each unit based on various annotations (examples include loss of function, conservation, deleteriousness scores, etc.). The aggregation units are defined in an R dataframe. Each row of the dataframe specifies a variant (chromosome, position, ref, alt) and the group identifier (group_id) assigned to it. Mutiple rows with different group identifiers can be specified to assign a variant to different groups (for example a variant can be assigned to mutiple genes). aggfile &lt;- &quot;variants_by_gene.RData&quot; if (!file.exists(aggfile)) download.file(file.path(workshop.path, aggfile), aggfile) aggunit &lt;- TopmedPipeline::getobj(aggfile) names(aggunit) ## [1] &quot;group_id&quot; &quot;chromosome&quot; &quot;position&quot; &quot;ref&quot; &quot;alt&quot; head(aggunit) ## # A tibble: 6 x 5 ## group_id chromosome position ref alt ## &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; ## 1 ENSG00000000005.5 X 99850725 A G ## 2 ENSG00000000938.8 1 27960254 A G ## 3 ENSG00000001084.6 6 53357691 C T ## 4 ENSG00000001084.6 6 53413986 T C ## 5 ENSG00000001084.6 6 53466979 C T ## 6 ENSG00000001167.10 6 41064020 A G # an example of variant that is present in mutiple groups library(dplyr) mult &lt;- aggunit %&gt;% group_by(chromosome, position) %&gt;% summarise(n=n()) %&gt;% filter(n &gt; 1) inner_join(aggunit, mult[2,1:2]) ## # A tibble: 4 x 5 ## group_id chromosome position ref alt ## &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; ## 1 ENSG00000188157.9 1 985900 C T ## 2 ENSG00000217801.5 1 985900 C T ## 3 ENSG00000242590.1 1 985900 C T ## 4 ENSG00000273443.1 1 985900 C T 5.4.3 Association testing with aggregate units We can run a burden test or SKAT on each of these units using the GENESIS function assocTestSeq. This function expects a list, where each element of the list is a dataframe representing a single aggregation unit and containing the unique variant.id assigned to each variant in a GDS file. We use the TopmedPipeline function aggregateListByAllele to quickly convert our single dataframe to the required format. This function can account for multiallelic variants (the same chromosome, position, and ref, but different alt alleles). The first argument is the GDS object returned by seqOpen (see above). library(TopmedPipeline) aggVarList &lt;- aggregateListByAllele(gds, aggunit) length(aggVarList) ## [1] 932 head(names(aggVarList)) ## [1] &quot;ENSG00000188157.9&quot; &quot;ENSG00000242590.1&quot; &quot;ENSG00000217801.5&quot; ## [4] &quot;ENSG00000273443.1&quot; &quot;ENSG00000131591.13&quot; &quot;ENSG00000237330.2&quot; aggVarList[[1]] ## variant.id chromosome position ref nAlleles allele allele.index ## 1 1 1 970546 C 2 G 1 ## 2 2 1 985900 C 2 T 1 As in the previous section, we must fit the null model before running the association test. assoc &lt;- assocTestSeq(seqData, nullmod, test=&quot;Burden&quot;, aggVarList=aggVarList, AF.range=c(0,0.1), weight.beta=c(1,1)) names(assoc) ## [1] &quot;param&quot; &quot;nsample&quot; &quot;results&quot; &quot;variantInfo&quot; head(assoc$results) ## n.site n.sample.alt burden.skew Score Var ## ENSG00000188157.9 2 116 2.867095 16.33548164 99.2100284 ## ENSG00000242590.1 2 116 2.867095 16.33548164 99.2100284 ## ENSG00000217801.5 1 107 3.041979 16.03409196 92.5372698 ## ENSG00000273443.1 1 107 3.041979 16.03409196 92.5372698 ## ENSG00000131591.13 1 1 33.466573 0.03348047 0.9598379 ## ENSG00000237330.2 1 1 33.466573 0.03348047 0.9598379 ## Score.stat Score.pval ## ENSG00000188157.9 2.689727688 0.10099707 ## ENSG00000242590.1 2.689727688 0.10099707 ## ENSG00000217801.5 2.778254702 0.09555224 ## ENSG00000273443.1 2.778254702 0.09555224 ## ENSG00000131591.13 0.001167845 0.97273860 ## ENSG00000237330.2 0.001167845 0.97273860 head(names(assoc$variantInfo)) ## [1] &quot;ENSG00000188157.9&quot; &quot;ENSG00000242590.1&quot; &quot;ENSG00000217801.5&quot; ## [4] &quot;ENSG00000273443.1&quot; &quot;ENSG00000131591.13&quot; &quot;ENSG00000237330.2&quot; head(assoc$variantInfo[[1]]) ## variantID allele chr pos n.obs freq weight ## 1 1 1 1 970546 1126 0.003996448 1 ## 2 2 1 1 985900 1126 0.049289520 1 qqPlot(assoc$results$Score.pval) seqClose(gds) "],
["analysis-pipeline.html", "6 Analysis Pipeline 6.1 Running on a local cluster 6.2 Running on AWS Batch", " 6 Analysis Pipeline The DCC’s analysis pipeline is hosted on github: https://github.com/smgogarten/analysis_pipeline 6.1 Running on a local cluster To run a burden test on our local SGE cluster, first we create a config file and call it assoc_window_burden.config: out_prefix &quot;test&quot; gds_file &quot;testdata/1KG_phase3_subset_chr .gds&quot; phenotype_file &quot;testdata/1KG_phase3_subset_annot.RData&quot; pcrelate_file &quot;testdata/round2_pcrelate.gds&quot; pca_file &quot;testdata/round2_pcair.RData&quot; sample_include_file &quot;testdata/sample_include.RData&quot; variant_include_file &quot;testdata/variant_include_chr .RData&quot; outcome outcome covars &quot;sex&quot; n_pcs 4 alt_freq_range &quot;0 0.1&quot; test &quot;burden&quot; test_type &quot;score&quot; We will use the python script assoc.py to submit all jobs. First we look at the available options: setenv PIPELINE /projects/topmed/working_code/analysis_pipeline $PIPELINE/assoc.py --help Let’s run a sliding window test on chromosomes 1-10. We will also specify the cluster type, although UW_Cluster is actually the default. The last argument is our config file. First, we print the commands that will be be run without actually submitting jobs: $PIPELINE/assoc.py --chromosomes 1-10 --cluster_type UW_Cluster --print_only window testdata/assoc_window_burden.config The default segment length is 10,000 kb, but we can change that to 50,000 kb when we submit: $PIPELINE/assoc.py --chromosomes 1-10 --cluster_type UW_Cluster --segment_length 50000 window testdata/assoc_window_burden.config We can use the qstat command to check the status of our jobs. 6.2 Running on AWS Batch "],
["analysis-commons.html", "7 Analysis Commons 7.1 Outline 7.2 Web Interface and Running an Analysis Application 7.3 Command line interface 7.4 Writing your own Apps", " 7 Analysis Commons 7.1 Outline Introduction to web-interface Running a single variant analysis Workflows and monitoring jobs Running aggregate tests (SKAT) Run batch jobs from the command line Writing your own Apps 7.2 Web Interface and Running an Analysis Application 7.2.1 Task 1) Run a single variant analysis. Note that the job will finish instantaneously if you don’t change the output file name. It knows that you are running the exact same job and will just reuse results from previous analyses. Log into http://dnanexus.com using the user name and password listed on the handout. Should be in the form of dxuser#. Navigate to and select (tools/genesis_v0.7) File inputs: * phenofile -&gt; phenotype/1KG_pheno.csv * genotypefile -&gt; genotypes/1KG_phase3_subset_chr1.gds * kinship -&gt; kinship/1KG_kins.Rda Parameter inputs: * output folder: output/YOURFOLDERNAME * outcome: outcome * covariates: Population,sex * outputfilename: single_chr1 * test_type: Single * ID:sample.id 7.2.2 Task 2) Run SKAT test grouping variants into gene transcript regions and limit the variants to those with a CADD phred score &gt; 2 and MAF &lt;= 5%. Italic inputs below are the same as single variant; update the parameters &amp; files to change to a SKAT test. Go to the monitor tab. Click on the Name of a job ( or someone’s) that successfully completed the single variant analysis, then click “Launch as new Job” and modify the inputs. File inputs: * phenofile -&gt; phenotype/1KG_pheno.csv * genotypefile -&gt; genotypes/1KG_phase3_subset_chr1.gds * kinship -&gt; kinship/1KG_kins.Rda * annotation -&gt; annotation/1KG_annotation_CHR1.txt * genefile -&gt; aggregation/AggUnit_CHR1_ucscgene.csv Parameter inputs: * outcome: outcome * covariates: Population,sex * ID:sample.id * output folder: output/YOURFOLDERNAME * outputfilename: skat_chr1_geneBased_CADDgt2 * test_type: SKAT * snp_filter: CADD_phred&gt;2 * min_mac:0 * top_maf: 0.05 * weights: c(1,25) 7.3 Command line interface References: * Command Line Interface Quickstart * Index of dx commands 7.3.1 Log in to AWI Replace dxuserX with the user ID from your handout $ ssh -i ~/.ssh/tm_workshop.pem dxuserX@34.209.245.0 $ source /usr/local/dx-toolkit/environment $ dx login Enter the following at the prompts username: dxuserX password: dxuserX project:dcc $ dx select project dcc 7.3.2 Task 3) Navigate directories, make output directory, examine files File paths: :/path/to/file.txt Example: dcc:/phenotypes/1KG_pheno.csv List directory contents: $ dx select dcc $ dx ls $ dx ls /tools $ dx ls dcc:/tools Get results from project $ dx download dcc:/phenotype/1KG_pheno.csv 7.3.3 Task 4) Run single variant analysis from command line using bash script Open the Single.sh bash script and edit to replace the output directory “YOURNAME” to your folder $ dx describe tools/genesis_v0.7 Either edit using vi $ vi Single_multichrom.sh Or if not a vi fan you can use this line to substitute your name for the directory name. Please replace ‘JenB’ with your output directory name in the line below. $ sed -i &#39;s/YOURNAME/JenB/&#39; Single_multichrom.sh 7.4 Writing your own Apps 7.4.1 Task 5) Write an App that creates phenotype residuals and performs an inverse normal transform Use app wizard to create template $ dx-app-wizard App Name: make_residuals Title []: Create inverse normal transformed residuals 1st input name (&lt;ENTER&gt; to finish): phenofile Label (optional human-readable name) []: CSV phenotype file Choose a class (&lt;TAB&gt; twice for choices): file This is an optional parameter [y/n]: n 2nd input name (&lt;ENTER&gt; to finish): model Label (optional human-readable name) []: model for creating residuals (e.g. outcome~age+Population ) Choose a class (&lt;TAB&gt; twice for choices): string This is an optional parameter [y/n]: n 3rd input name (&lt;ENTER&gt; to finish): prefix Label (optional human-readable name) []: Output filename prefix Choose a class (&lt;TAB&gt; twice for choices): string This is an optional parameter [y/n]: n 4th input name (&lt;ENTER&gt; to finish): &lt;ENTER&gt; 1st output name (&lt;ENTER&gt; to finish): output Label (optional human-readable name) []: Choose a class (&lt;TAB&gt; twice for choices): file Timeout policy [48h]: 1h Programming language: bash Look at the files created by the wizard cd make_residuals/ ls more dxapp.json Edit App executable to run an R script $ vi src/make_residuals.sh main() { echo &quot;Value of phenofile: &#39;$phenofile&#39;&quot; echo &quot;Value of model: &#39;$model&#39;&quot; echo &quot;Value of prefix: &#39;$prefix&#39;&quot; dx download &quot;$phenofile&quot; -o phenofile Rscript /make_resid.R $model output=$(dx upload output --brief) dx-jobutil-add-output output &quot;$output&quot; --class=file dx mv ${output} ${prefix}.csv } Create an R script that does the ‘work’ $ vi resources/make_resid.R args&lt;-commandArgs(TRUE) model &lt;- as.formula(args[1]) print(model) pheno = read.csv(&#39;phenofile&#39;,as.is=T) pheno$resid = residuals(lm(model,data=pheno)) pheno$invnt_resid = with(pheno,qnorm((rank(resid,na.last=&quot;keep&quot;)-0.5)/sum(!is.na(resid)))) write.csv(pheno,file=&#39;output&#39;,row.names=F) Build the App $ dx build -f make_residuals --destination=output/YOURNAME/make_residuals Run the App $ dx run output/YOURNAME/make_residuals -iphenofile=phenotype/1KG_pheno.csv \\ -imodel=outcome~sex+Population -iprefix=1kg_pheno_invnt \\ --destination=output/YOURNAME --yes "]
]
